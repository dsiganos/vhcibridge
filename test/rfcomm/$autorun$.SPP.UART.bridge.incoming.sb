
dim rc
dim hC                      //SPP connection handle
dim s$[8]

sub Initialise()
    dim hSppPort


    //Configure discoverability mode
    rc = BtcDiscoveryConfig(0,0)

    rc = BtcSetPairable(1)

    //Set connectable so other devices can connect to this device
    rc = BtcSetConnectable(1)

    //Open SPP port and listen for SPP connections, enable discoverability
    rc = BtcSppOpen(hSppPort)
    print "Ready\n"
endsub

//------------------------------------------------------------------------------
//This handler is Called when data is received via SPP - BRIDGE mode
//------------------------------------------------------------------------------
function HandlerSppData()
    dim hPort, data$, rLen
    rc = BtcSppRead(hPort, data$, rLen)

    rc=BtcSppWrite(hC, data$, rlen)
    print "RX: "; data$; " rlen="; rlen; "\n"
endfunc 1

//------------------------------------------------------------------------------
//This handler is  Called when an SPP disconnection occurs
//------------------------------------------------------------------------------
function HandlerSppDiscon(hConn)
    print "\n --- Spp Disconnect"
    //Set connectable
    rc = BtcSetConnectable(1)
endfunc 1

//------------------------------------------------------------------------------
//This handler is  Called after an SPP connection attempt
//------------------------------------------------------------------------------
function HandlerSppConn(hConn, res) as integer
    print "\n --- SPP Connect: (";integer.h' res;")\n"
    //If connected successfully
    if res == 0 then
        hC = hConn
        //Set not connectable to prevent multiple connections
        rc = BtcSetConnectable(0)

//        dim rlen, data$: data$ = "Welcome to Gkekis SPP service"
//        rc=BtcSppWrite(hC, data$, rlen)
    endif
endfunc 1


//------------------------------------------------------------------------------
// Called when there is a pairing request from another device
//------------------------------------------------------------------------------
function HandlerPairReq()
    rc = BtcGetPAIRRequestBDAddr(s$[3])       //Setting it to s$[3] so it doesn't get mixed up with any other strings (command params etc) that may be stored in s$[1]
    rc = BtcBondingEraseKey(s$[3])            //Erase link key for this bluetooth device incase already bonded with it
    print "\nPair Req: "; StrHexize$(s$[3])
            rc = BtcSendPairResp(1)
            print "\n\nPairing...\n"

    UartFlush(1)                              //Flush the uart rx buffer

endfunc 1


OnEvent  EVBTC_PAIR_REQUEST     call HandlerPairReq
OnEvent  EVSPPCONN              call HandlerSppConn
OnEvent  EVSPPDISCON            call HandlerSppDiscon
OnEvent  EVBTC_SPP_DATA_RECEIVED call HandlerSppData

Initialise()
WaitEvent
