#define PAIRABLE_ON_STARTUP              1

dim rc
dim hC                      //SPP connection handle


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub Initialise()
    dim hSppPort                //Handle of spp port that a peer will connect to
    rc = BtcSetPairable(PAIRABLE_ON_STARTUP)

    //Set connectable so other devices can connect to this device
    rc = BtcSetConnectable(1)

        //Open SPP port and listen for SPP connections, enable discoverability
        rc = BtcSppOpen(hSppPort)
    print "Ready\n"
endsub

//******************************************************************************
// Handler definitions
//******************************************************************************

//------------------------------------------------------------------------------
//This handler is Called when data is received via SPP - BRIDGE mode
//------------------------------------------------------------------------------
function HandlerSppData()
    dim hPort, data$, rLen
    rc = BtcSppRead(hPort, data$, rLen)

    rc=BtcSppWrite(hC, data$, rlen)
    print "RX: "; data$; " rlen="; rlen; "\n"
endfunc 1

//------------------------------------------------------------------------------
//This handler is  Called when an SPP disconnection occurs
//------------------------------------------------------------------------------
function HandlerSppDiscon(hConn)
    print "\n --- Spp Disconnect"
    //Set connectable
    rc = BtcSetConnectable(1)
endfunc 1

//------------------------------------------------------------------------------
//This handler is  Called after an SPP connection attempt
//------------------------------------------------------------------------------
function HandlerSppConn(hConn, res) as integer
    print "\n --- SPP Connect: (";integer.h' res;")\n"
    //If connected successfully
    if res == 0 then
        hC = hConn
        //Set not connectable to prevent multiple connections
        rc = BtcSetConnectable(0)

//        dim rlen, data$: data$ = "Welcome to Gkekis SPP service"
//        rc=BtcSppWrite(hC, data$, rlen)
    endif
endfunc 1


//******************************************************************************
//******************************************************************************
// Equivalent to main() in C
//******************************************************************************


//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
OnEvent  EVSPPCONN              call HandlerSppConn
OnEvent  EVSPPDISCON            call HandlerSppDiscon
OnEvent  EVBTC_SPP_DATA_RECEIVED call HandlerSppData

//------------------------------------------------------------------------------
// Initialise and then wait for events
//------------------------------------------------------------------------------
Initialise()

//------------------------------------------------------------------------------
// Wait for a synchronous event.
// An application can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
WaitEvent
